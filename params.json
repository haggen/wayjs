{"name":"WayJS","tagline":"Lightweight and flexible URL pattern matching in JavaScript.","body":"# WayJS\r\n\r\nLightweight and flexible URL pattern matching in JavaScript.\r\n\r\n## Tests:\r\n\r\nYou'll need [mocha](https://github.com/visionmedia/mocha) to run the tests.\r\n\r\nRun `$ npm install -g mocha`. The `-g` flag tells the NPM to install the module globally so mocha's binaries goes in your `/usr/bin` directory.\r\n\r\nThen run `$ mocha`.\r\n\r\n## Minify:\r\n\r\nYou'll need [uglify-js](https://github.com/mishoo/UglifyJS) to minify the script.\r\n\r\nInstall it with `$ npm install -g uglify-js`, then run `$ make`.\r\n\r\n## Usage:\r\n\r\nRegister a new route:\r\n\r\n```javascript\r\nway.map('/hello/world', function() {\r\n  console.log('Hello, world');\r\n});\r\n```\r\n\r\nThen match some path against route table:\r\n\r\n```javascript\r\nvar match = way.match('/hello/world');\r\n```\r\n\r\nThis will return the first route to match or `undefined` if none.\r\n\r\nThe route object has the collection of actions and eventually parsed parameters.\r\n\r\n```javascript\r\nmatch.actions; //-> [function() { console.log('Hello, world'); }]\r\nmatch.params;  //-> {}\r\n```\r\n\r\nYou can provide multiple actions.\r\n\r\n```javascript\r\nway.map('/hello/world', function() {/* 1 */}, function() {/* 2 */});\r\n```\r\n\r\nThat way you have control over the flow and do things like if the first action do not return true, it won't call the next one, or pass the returning value from the current action to the next one, or anything else that suits you. I told you it was flexible. :)\r\n\r\nWayJS works in both browser and Node.\r\n\r\n## Pattern syntax:\r\n\r\n### Named parameters\r\n\r\nCapture anything except forward slashes and save in `way.params` with given name.\r\n\r\n    way.map('/log/:message', function() {\r\n      console.log(way.params.message);\r\n    });\r\n\r\n### Optional groups\r\n\r\nMatches with or without the snippet inside the parenthesis.\r\n\r\n    way.map('(/good)/bye', function() {\r\n      console.log('Farewell!!');\r\n    })\r\n\r\n### Splats\r\n\r\nCapture everything, including slashes and save in `way.params.splat`. You can include multiple splats, returning an array.\r\n\r\n    way.map('/goto/*', function() {\r\n      console.log('Goto: ', way.params.splat[0]);\r\n    });\r\n\r\nAll the special syntaxes above can be combined to create powerful routing patterns.\r\n\r\n## Changelog:\r\n\r\n### v0.3.4 2012-09-06\r\n\r\n- Fixed bug when casting #map arguments as array\r\n\r\n### v0.3.3 2012-09-05\r\n\r\n- Added support for [requirejs](http://requirejs.org/)\r\n\r\n### v0.3.2 2012-09-05\r\n\r\n- Changed to multiple actions instead of allowing multiple matches\r\n- Accepts multiple splats\r\n- Tests updated accordingly\r\n\r\n### v0.2.1 2012-08-24\r\n\r\n- Changed patterns regex to do exact matches\r\n\r\n### v0.2.0 2012-08-23\r\n\r\n- Accepts multiple matches, returning a collection of them\r\n- Fixed bug with parameter values being sliced\r\n\r\n### v0.1.0 2012-08-21\r\n\r\n- First version\r\n","google":"UA-38812126-1","note":"Don't delete this file! It's used internally to help with page regeneration."}